{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","state","text","handleChange","event","setState","target","value","handleSubmit","preventDefault","handleAddTodo","props","trim","completed","id","uuidv4","this","className","onSubmit","type","placeholder","onChange","React","Component","TodoItem","isEditing","editingText","isError","editingInput","createRef","handleTextInputChange","handleInputKeyDown","keyCode","index","handleEditTodo","current","focus","toggleEditing","todo","prevState","handleToggleTodo","handleRemoveTodo","undefined","checked","onBlur","ref","onKeyDown","onDoubleClick","onClick","TodoList","todos","handleToggleAll","isChecked","items","map","item","key","htmlFor","TodoFooter","filter","counts","handleToggleTab","handleClearCompleted","disabled","every","App","title","newTodo","todoId","ind","inputValue","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ef47b97.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class TodoHeader extends React.Component {\n  state = {\n    text: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      text: event.target.value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { text } = this.state;\n    const { handleAddTodo } = this.props;\n\n    if (text.trim() !== '') {\n      handleAddTodo({\n        text,\n        completed: true,\n        id: uuidv4(),\n      });\n\n      this.setState({\n        text: '',\n      });\n    }\n  }\n\n  render() {\n    const { text } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1 className=\"title\">Todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={text}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoHeader.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  state = {\n    isEditing: false,\n    editingText: '',\n    isError: null,\n  };\n\n  editingInput = React.createRef();\n\n  componentDidUpdate() {\n    if (this.state.isEditing) {\n      this.editingInput.current.focus();\n    }\n  }\n\n  handleTextInputChange = ({ target }) => {\n    this.setState({\n      editingText: target.value,\n    });\n  }\n\n  handleInputKeyDown = ({ keyCode }) => {\n    const { editingText } = this.state;\n    const { index, handleEditTodo } = this.props;\n\n    if (editingText.trim() === '') {\n      this.editingInput.current.focus();\n      this.setState({\n        isError: 'Please enter the todo',\n      });\n\n      return;\n    }\n\n    if (keyCode === 13) {\n      handleEditTodo(index, editingText);\n\n      this.setState({\n        isEditing: false,\n        editingText: '',\n        isError: null,\n      });\n    } else if (keyCode === 27) {\n      this.setState({\n        isEditing: false,\n        editingText: '',\n        isError: null,\n      });\n    }\n  };\n\n  toggleEditing = () => {\n    const { text } = this.props.todo;\n\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n      editingText: text,\n    }));\n  }\n\n  render() {\n    const { isEditing, isError, editingText } = this.state;\n    const { todo, handleToggleTodo, handleRemoveTodo } = this.props;\n    const { text, completed } = todo;\n\n    return (\n      <li className={isEditing ? 'editing'\n        : ((completed === false && 'completed') || undefined)\n      }\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={handleToggleTodo}\n          checked={completed === false}\n        />\n        {isEditing\n          ? (\n            <>\n              <input\n                type=\"text\"\n                className=\"edit\"\n                onChange={this.handleTextInputChange}\n                onBlur={this.toggleEditing}\n                ref={this.editingInput}\n                value={editingText}\n                onKeyDown={this.handleInputKeyDown}\n              />\n              {isError && <div className=\"error\">{isError}</div>}\n            </>\n          )\n          : <label onDoubleClick={this.toggleEditing}>{text}</label>\n        }\n        <div className=\"view\">\n          <button\n            className=\"destroy\"\n            onClick={handleRemoveTodo}\n            type=\"button\"\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList(props) {\n  const {\n    todos,\n    handleToggleTodo,\n    handleRemoveTodo,\n    handleEditTodo,\n    handleToggleAll,\n    isChecked,\n  } = props;\n\n  const list = todos;\n\n  const items = list.map((item, index) => (\n    <TodoItem\n      key={item.id}\n      todo={item}\n      index={index}\n      handleEditTodo={handleEditTodo}\n      handleToggleTodo={() => {\n        handleToggleTodo(item.id);\n      }}\n      handleRemoveTodo={() => {\n        handleRemoveTodo(item.id);\n      }}\n    />\n  ));\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={handleToggleAll}\n        checked={isChecked}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as completed</label>\n      <ul className=\"todo-list\">{items}</ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n  isChecked: PropTypes.bool.isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoFooter(props) {\n  const {\n    filter,\n    counts,\n    handleToggleTab,\n    handleClearCompleted,\n    todos,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{`${counts} items left`}</span>\n      <ul className=\"filters\">\n        <li>\n          <button\n            type=\"button\"\n            className={filter === 'all' ? 'selected' : ''}\n            onClick={() => handleToggleTab('all')}\n          >\n            All\n          </button>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            className={filter === 'active' ? 'selected' : ''}\n            onClick={() => handleToggleTab('active')}\n          >\n            Active\n          </button>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            className={filter === 'completed' ? 'selected' : ''}\n            onClick={() => handleToggleTab('completed')}\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n        disabled={todos.every(todo => todo.completed) ? 'disabled' : ''}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodoFooter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  counts: PropTypes.number.isRequired,\n  handleToggleTab: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n};\n","import React, { Component } from 'react';\nimport './index.css';\nimport { TodoHeader } from './components/TodoHeader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFooter } from './components/TodoFooter';\n\nclass App extends Component {\n  state = {\n    filter: 'all',\n    items: [{\n      text: 'sample todo',\n      id: 1,\n      completed: true,\n    }],\n    title: '',\n  };\n\n  handleChange = ({ target }) => {\n    const title = target.value;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleAddTodo = (newTodo) => {\n    this.setState(prevState => ({\n      items: [\n        ...prevState.items,\n        newTodo,\n      ],\n    }));\n  }\n\n  handleToggleTodo = (todoId) => {\n    this.setState(prevState => ({\n      items: prevState.items.map((item) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  handleRemoveTodo = (todoId) => {\n    this.setState(prevState => ({\n      items: prevState.items.filter(item => item.id !== todoId),\n    }));\n  }\n\n  handleEditTodo = (index, text) => {\n    this.setState(prevState => ({\n      items: prevState.items.map((item, ind) => {\n        if (ind === index) {\n          return {\n            ...item,\n            text,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  handleToggleTab = (filter) => {\n    this.setState({ filter });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      items: prevState.items.filter(({ completed }) => completed),\n    }));\n  }\n\n  handleToggleAll = (event) => {\n    const completed = event.target.checked;\n\n    this.setState(prevState => ({\n      items: prevState.items.map(item => ({\n        ...item,\n        completed: !completed,\n      })),\n    }));\n  }\n\n  render() {\n    const { filter, items, title } = this.state;\n\n    let todos = items;\n\n    if (filter === 'completed') {\n      todos = items.filter(({ completed }) => !completed);\n    } else if (filter === 'active') {\n      todos = items.filter(({ completed }) => completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          handleAddTodo={this.handleAddTodo}\n          inputValue={title}\n        />\n        <section className=\"main\">\n          <TodoList\n            todos={todos}\n            handleEditTodo={this.handleEditTodo}\n            handleToggleAll={this.handleToggleAll}\n            handleToggleTodo={this.handleToggleTodo}\n            handleRemoveTodo={this.handleRemoveTodo}\n            isChecked={items.every(todo => !(todo.completed))}\n          />\n        </section>\n        <TodoFooter\n          filter={filter}\n          todos={items}\n          counts={items.filter(({ completed }) => completed).length}\n          handleToggleTab={this.handleToggleTab}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}