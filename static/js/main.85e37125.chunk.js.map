{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","props","handleAddTodo","handleChange","inputValue","className","type","placeholder","onKeyDown","onChange","value","TodoItem","handleTextInputChange","target","handleEditTodo","index","toggleEditing","todo","text","editingInput","current","focus","setState","prevState","isEditing","handleEndEditing","e","keyCode","state","React","createRef","this","handleToggleTodo","handleRemoveTodo","completed","checked","onBlur","ref","onDoubleClick","onClick","Component","TodoList","filter","todos","handleToggleAll","list","items","map","item","key","id","every","htmlFor","TodoFooter","counts","handleToggleTab","handleClearCompleted","href","App","uuid","title","event","trim","splice","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85e37125.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoHeader(props) {\n  const { handleAddTodo, handleChange, inputValue } = props;\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"title\">Todos</h1>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onKeyDown={handleAddTodo}\n        onChange={handleChange}\n        value={inputValue}\n      />\n    </header>\n  );\n}\n\nTodoHeader.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  inputValue: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n    };\n    this.editingInput = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.state.isEditing) {\n      this.editingInput.current.focus();\n    }\n  }\n\n  handleTextInputChange = ({ target }) => {\n    const { value } = target;\n\n    this.props.handleEditTodo(this.props.index, value);\n  }\n\n  toggleEditing = () => {\n    if (this.props.todo.text === '') {\n      return this.editingInput.current.focus();\n    }\n\n    return this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n    }));\n  }\n\n  handleEndEditing = (e) => {\n    if (e.keyCode === 13) {\n      this.toggleEditing();\n    }\n  }\n\n  render() {\n    const { isEditing } = this.state;\n    const { todo, handleToggleTodo, handleRemoveTodo } = this.props;\n    const { text, completed } = todo;\n\n    return (\n      <li className={isEditing ? 'editing' : (completed === 0 && 'completed')}>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={handleToggleTodo}\n          checked={completed === 0 && 'checked'}\n        />\n        {isEditing\n          ? (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              onChange={this.handleTextInputChange}\n              onKeyDown={this.handleEndEditing}\n              onBlur={this.toggleEditing}\n              ref={this.editingInput}\n              value={text}\n            />\n          )\n          : <label onDoubleClick={this.toggleEditing}>{text}</label>\n        }\n        <div className=\"view\">\n          <button\n            className=\"destroy\"\n            onClick={handleRemoveTodo}\n            type=\"button\"\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.number,\n    text: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList(props) {\n  const {\n    filter,\n    todos,\n    handleToggleTodo,\n    handleRemoveTodo,\n    handleEditTodo,\n    handleToggleAll,\n  } = props;\n\n  let list = todos;\n\n  if (filter === 'completed') {\n    list = todos.filter(({ completed }) => !completed);\n  } else if (filter === 'active') {\n    list = todos.filter(({ completed }) => completed);\n  }\n\n  const items = list.map((item, index) => (\n    <TodoItem\n      key={item.id}\n      todo={item}\n      index={index}\n      handleEditTodo={handleEditTodo}\n      handleToggleTodo={() => {\n        handleToggleTodo(index);\n      }}\n      handleRemoveTodo={() => {\n        handleRemoveTodo(index);\n      }}\n    />\n  ));\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={handleToggleAll}\n        checked={list.every(todo => !(todo.completed))}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">{items}</ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  filter: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.number,\n    text: PropTypes.string,\n  })).isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoFooter(props) {\n  const {\n    filter,\n    counts,\n    handleToggleTab,\n    handleClearCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{`${counts} items left`}</span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={filter === 'all' ? 'selected' : ''}\n            onClick={() => handleToggleTab('all')}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={filter === 'active' ? 'selected' : ''}\n            onClick={() => handleToggleTab('active')}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={filter === 'completed' ? 'selected' : ''}\n            onClick={() => handleToggleTab('completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodoFooter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  counts: PropTypes.number.isRequired,\n  handleToggleTab: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport './index.css';\nimport { TodoHeader } from './components/TodoHeader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFooter } from './components/TodoFooter';\n\nclass App extends Component {\n  state = {\n    filter: 'all',\n    items: [{\n      text: 'sample todo',\n      id: uuid(),\n      completed: 1,\n    }],\n    title: '',\n  };\n\n  handleChange = ({ target }) => {\n    const title = target.value;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleAddTodo = (event) => {\n    const { value } = event.target;\n\n    if (event.keyCode !== 13 || value.trim() === '') {\n      return;\n    }\n\n    const item = {\n      text: value,\n      completed: 1,\n      id: uuid(),\n    };\n\n    this.setState(prevState => ({\n      items: [...prevState.items, item],\n      title: '',\n    }));\n  }\n\n  handleToggleTodo = (index) => {\n    const { items } = this.state;\n\n    items[index].completed = items[index].completed ? 0 : 1;\n    this.setState({ items });\n  }\n\n  handleRemoveTodo = (index) => {\n    const { items } = this.state;\n\n    items.splice(index, 1);\n    this.setState({ items });\n  }\n\n  handleEditTodo = (index, text) => {\n    const { items } = this.state;\n\n    items[index].text = text;\n    this.setState({ items });\n  }\n\n  handleToggleTab = (filter) => {\n    this.setState({ filter });\n  }\n\n  handleClearCompleted = () => {\n    const items = this.state.items.filter(({ completed }) => completed);\n\n    this.setState({ items: [...items] });\n  }\n\n  handleToggleAll = (event) => {\n    const completed = event.target.checked;\n\n    this.setState(prevState => ({\n      items: prevState.items.map(item => ({\n        ...item,\n        completed: +(!completed),\n      })),\n    }));\n  }\n\n  render() {\n    const { filter, items, title } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          handleAddTodo={this.handleAddTodo}\n          handleChange={this.handleChange}\n          inputValue={title}\n        />\n        <section className=\"main\">\n          <TodoList\n            filter={filter}\n            todos={items}\n            handleEditTodo={this.handleEditTodo}\n            handleToggleAll={this.handleToggleAll}\n            handleToggleTodo={this.handleToggleTodo}\n            handleRemoveTodo={this.handleRemoveTodo}\n          />\n        </section>\n        <TodoFooter\n          filter={filter}\n          counts={items.filter(({ completed }) => completed).length}\n          handleToggleTab={this.handleToggleTab}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}