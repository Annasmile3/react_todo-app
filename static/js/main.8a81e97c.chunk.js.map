{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","state","text","handleChange","event","setState","target","value","trim","handleSubmit","preventDefault","handleAddTodo","props","completed","id","uuidv4","this","className","onSubmit","type","placeholder","onChange","React","Component","TodoItem","isEditing","editingInput","createRef","handleTextInputChange","handleEditTodo","index","toggleEditing","todo","prevState","current","focus","handleEndEditing","e","keyCode","handleToggleTodo","handleRemoveTodo","undefined","checked","onKeyDown","onBlur","ref","onDoubleClick","onClick","TodoList","todos","handleToggleAll","list","isChecked","every","items","map","item","key","htmlFor","TodoFooter","filter","counts","handleToggleTab","handleClearCompleted","href","disabled","App","title","newTodo","todoId","ind","inputValue","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a81e97c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class TodoHeader extends React.Component {\n  state = {\n    text: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      text: event.target.value.trim(),\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { text } = this.state;\n    const { handleAddTodo } = this.props;\n\n    if (text.trim() !== '') {\n      handleAddTodo({\n        text,\n        completed: true,\n        id: uuidv4(),\n      });\n\n      this.setState({\n        text: '',\n      });\n    }\n  }\n\n  render() {\n    const { text } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1 className=\"title\">Todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={text}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoHeader.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    state = {\n      isEditing: false,\n    };\n\n    editingInput = React.createRef();\n\n    componentDidUpdate() {\n      if (this.state.isEditing) {\n        this.editingInput.current.focus();\n      }\n    }\n\n  handleTextInputChange = ({ target }) => {\n    const { value } = target;\n    const { handleEditTodo, index } = this.props;\n\n    handleEditTodo(index, value);\n  }\n\n  toggleEditing = () => {\n    if (this.props.todo.text === '') {\n      this.editingInput.current.focus();\n\n      return;\n    }\n\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n    }));\n  }\n\n  handleEndEditing = (e) => {\n    if (e.keyCode === 13) {\n      this.toggleEditing();\n    }\n  }\n\n  render() {\n    const { isEditing } = this.state;\n    const { todo, handleToggleTodo, handleRemoveTodo } = this.props;\n    const { text, completed } = todo;\n\n    return (\n      <li className={isEditing ? 'editing'\n        : ((completed === false && 'completed')\n        || undefined)}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={handleToggleTodo}\n          checked={completed === false}\n        />\n        {isEditing\n          ? (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              onChange={this.handleTextInputChange}\n              onKeyDown={this.handleEndEditing}\n              onBlur={this.toggleEditing}\n              ref={this.editingInput}\n              value={text}\n            />\n          )\n          : <label onDoubleClick={this.toggleEditing}>{text}</label>\n        }\n        <div className=\"view\">\n          <button\n            className=\"destroy\"\n            onClick={handleRemoveTodo}\n            type=\"button\"\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList(props) {\n  const {\n    todos,\n    handleToggleTodo,\n    handleRemoveTodo,\n    handleEditTodo,\n    handleToggleAll,\n  } = props;\n\n  const list = todos;\n  const isChecked = list.every(todo => !(todo.completed));\n\n  const items = list.map((item, index) => (\n    <TodoItem\n      key={item.id}\n      todo={item}\n      index={index}\n      handleEditTodo={handleEditTodo}\n      handleToggleTodo={() => {\n        handleToggleTodo(item.id);\n      }}\n      handleRemoveTodo={() => {\n        handleRemoveTodo(item.id);\n      }}\n    />\n  ));\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={handleToggleAll}\n        checked={isChecked}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as completed</label>\n      <ul className=\"todo-list\">{items}</ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoFooter(props) {\n  const {\n    filter,\n    counts,\n    handleToggleTab,\n    handleClearCompleted,\n    todos,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{`${counts} items left`}</span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={filter === 'all' ? 'selected' : ''}\n            onClick={() => handleToggleTab('all')}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={filter === 'active' ? 'selected' : ''}\n            onClick={() => handleToggleTab('active')}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={filter === 'completed' ? 'selected' : ''}\n            onClick={() => handleToggleTab('completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n        disabled={todos.every(todo => todo.completed) ? 'disabled' : ''}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodoFooter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  counts: PropTypes.number.isRequired,\n  handleToggleTab: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n};\n","import React, { Component } from 'react';\nimport './index.css';\nimport { TodoHeader } from './components/TodoHeader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFooter } from './components/TodoFooter';\n\nclass App extends Component {\n  state = {\n    filter: 'all',\n    items: [{\n      text: 'sample todo',\n      id: 1,\n      completed: true,\n    }],\n    title: '',\n  };\n\n  handleChange = ({ target }) => {\n    const title = target.value;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleAddTodo = (newTodo) => {\n    this.setState(prevState => ({\n      items: [\n        ...prevState.items,\n        newTodo,\n      ],\n    }));\n  }\n\n  handleToggleTodo = (todoId) => {\n    this.setState(prevState => ({\n      items: prevState.items.map((item) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  handleRemoveTodo = (todoId) => {\n    this.setState(prevState => ({\n      items: prevState.items.filter(item => item.id !== todoId),\n    }));\n  }\n\n  handleEditTodo = (index, text) => {\n    this.setState(prevState => ({\n      items: prevState.items.map((item, ind) => {\n        if (ind === index) {\n          return {\n            ...item,\n            text,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  handleToggleTab = (filter) => {\n    this.setState({ filter });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      items: prevState.items.filter(({ completed }) => completed),\n    }));\n  }\n\n  handleToggleAll = (event) => {\n    const completed = event.target.checked;\n\n    this.setState(prevState => ({\n      items: prevState.items.map(item => ({\n        ...item,\n        completed: !completed,\n      })),\n    }));\n  }\n\n  render() {\n    const { filter, items, title } = this.state;\n\n    let todos = items;\n\n    if (filter === 'completed') {\n      todos = items.filter(({ completed }) => !completed);\n    } else if (filter === 'active') {\n      todos = items.filter(({ completed }) => completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          handleAddTodo={this.handleAddTodo}\n          inputValue={title}\n        />\n        <section className=\"main\">\n          <TodoList\n            todos={todos}\n            handleEditTodo={this.handleEditTodo}\n            handleToggleAll={this.handleToggleAll}\n            handleToggleTodo={this.handleToggleTodo}\n            handleRemoveTodo={this.handleRemoveTodo}\n          />\n        </section>\n        <TodoFooter\n          filter={filter}\n          todos={items}\n          counts={items.filter(({ completed }) => completed).length}\n          handleToggleTab={this.handleToggleTab}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}