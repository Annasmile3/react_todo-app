{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","props","handleAddTodo","handleChange","inputValue","className","type","placeholder","onKeyDown","onChange","value","TodoItem","onTextInputChange","e","target","handleEditTodo","index","toggleEditing","data","text","editingInput","current","focus","setState","prevState","isEditing","handleEndEditing","keyCode","state","React","createRef","this","handleToggleTodo","handleRemoveTodo","completed","checked","onBlur","ref","onDoubleClick","onClick","Component","TodoList","filter","handleToggleAll","list","items","map","item","key","id","every","todo","htmlFor","TodoFooter","counts","handleToggleTab","handleClearCompleted","href","App","uuid","title","event","trim","splice","onHandleToggleAll","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d6b9e15.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoHeader(props) {\n  const { handleAddTodo, handleChange, inputValue } = props;\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"title\">Todos</h1>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onKeyDown={handleAddTodo}\n        onChange={handleChange}\n        value={inputValue}\n      />\n    </header>\n  );\n}\n\nTodoHeader.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  inputValue: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n    };\n    this.editingInput = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.state.isEditing) {\n      this.editingInput.current.focus();\n    }\n  }\n\n  onTextInputChange = (e) => {\n    const { value } = e.target;\n\n    this.props.handleEditTodo(this.props.index, value);\n  }\n\n  toggleEditing = () => {\n    if (this.props.data.text === '') {\n      return this.editingInput.current.focus();\n    }\n\n    return this.setState(prevState => ({ isEditing: !prevState.isEditing }));\n  }\n\n  handleEndEditing = (e) => {\n    if (e.keyCode === 13) {\n      this.toggleEditing();\n    }\n  }\n\n  render() {\n    const { isEditing } = this.state;\n    const { data, handleToggleTodo, handleRemoveTodo } = this.props;\n    const { text, completed } = data;\n\n    return (\n      <li className={isEditing ? 'editing' : (completed === 0 && 'completed')}>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={handleToggleTodo}\n          checked={completed === 0 && 'checked'}\n        />\n        {isEditing\n          ? (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              onChange={this.onTextInputChange}\n              onKeyDown={this.handleEndEditing}\n              onBlur={this.toggleEditing}\n              ref={this.editingInput}\n              value={text}\n            />\n          )\n          : <label onDoubleClick={this.toggleEditing}>{text}</label>\n        }\n        <div className=\"view\">\n          <button\n            className=\"destroy\"\n            onClick={handleRemoveTodo}\n            type=\"button\"\n          />\n        </div>\n\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  data: PropTypes.shape({\n    completed: PropTypes.number,\n    text: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList(props) {\n  const {\n    filter,\n    data,\n    handleToggleTodo,\n    handleRemoveTodo,\n    handleEditTodo,\n    handleToggleAll,\n  } = props;\n\n  let list = data;\n\n  if (filter === 'completed') {\n    list = data.filter(({ completed }) => !completed);\n  } else if (filter === 'active') {\n    list = data.filter(({ completed }) => completed);\n  }\n\n  const items = list.map((item, index) => (\n    <TodoItem\n      key={item.id}\n      data={item}\n      index={index}\n      handleEditTodo={handleEditTodo}\n      handleToggleTodo={() => {\n        handleToggleTodo(index);\n      }}\n      handleRemoveTodo={() => {\n        handleRemoveTodo(index);\n      }}\n    />\n  ));\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={handleToggleAll}\n        checked={list.every(todo => todo.completed)}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">{items}</ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.number,\n    text: PropTypes.string,\n  })).isRequired,\n  handleToggleTodo: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  handleEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoFooter(props) {\n  const {\n    filter,\n    counts,\n    handleToggleTab,\n    handleClearCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{`${counts} items left`}</span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={filter === 'all' ? 'selected' : ''}\n            onClick={() => handleToggleTab('all')}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={filter === 'active' ? 'selected' : ''}\n            onClick={() => handleToggleTab('active')}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={filter === 'completed' ? 'selected' : ''}\n            onClick={() => handleToggleTab('completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodoFooter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  counts: PropTypes.number.isRequired,\n  handleToggleTab: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport './index.css';\nimport { TodoHeader } from './components/TodoHeader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFooter } from './components/TodoFooter';\n\nclass App extends Component {\n  state = {\n    filter: 'all',\n    items: [{\n      text: 'sample todo',\n      id: uuid(),\n      completed: 1,\n    }],\n    title: '',\n  };\n\n  handleChange = ({ target }) => {\n    const title = target.value;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleAddTodo = (event) => {\n    const { value } = event.target;\n\n    if (event.keyCode !== 13 || value.trim() === '') {\n      return;\n    }\n\n    const item = {\n      text: value,\n      completed: 1,\n      id: uuid(),\n    };\n\n    this.setState(prevState => ({\n      items: [...prevState.items, item],\n      title: '',\n    }));\n  }\n\n  handleToggleTodo = (index) => {\n    const { items } = this.state;\n\n    items[index].completed = items[index].completed ? 0 : 1;\n    this.setState({ items });\n  }\n\n  handleRemoveTodo = (index) => {\n    const { items } = this.state;\n\n    items.splice(index, 1);\n    this.setState({ items });\n  }\n\n  handleEditTodo = (index, text) => {\n    const { items } = this.state;\n\n    items[index].text = text;\n    this.setState({ items });\n  }\n\n  handleToggleTab = (filter) => {\n    this.setState({ filter });\n  }\n\n  handleClearCompleted = () => {\n    const items = this.state.items.filter(({ completed }) => completed);\n\n    this.setState({ items: [...items] });\n  }\n\n  onHandleToggleAll = (event) => {\n    const completed = event.target.checked;\n\n    this.setState(prevState => ({\n      items: prevState.items.map(item => ({\n        ...item,\n        completed: +completed,\n      })),\n    }));\n  }\n\n  render() {\n    const { filter, items } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          handleAddTodo={this.handleAddTodo}\n          handleChange={this.handleChange}\n          inputValue={this.state.title}\n        />\n        <section className=\"main\">\n          <TodoList\n            filter={filter}\n            data={items}\n            handleEditTodo={this.handleEditTodo}\n            handleToggleAll={this.onHandleToggleAll}\n            handleToggleTodo={this.handleToggleTodo}\n            handleRemoveTodo={this.handleRemoveTodo}\n          />\n        </section>\n        <TodoFooter\n          filter={filter}\n          counts={items.filter(({ completed }) => completed).length}\n          handleToggleTab={this.handleToggleTab}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}